//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace PAOProject {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    public sealed partial class Setting201611 : global::System.Configuration.ApplicationSettingsBase {
        
        private static Setting201611 defaultInstance = ((Setting201611)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Setting201611())));
        
        public static Setting201611 Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("资产注册/检索机制; 扩展属性的获取/保存; \r\nPaoApplication作为资产树的根，增加ObjectIDFactory用于通过资产ID查找对象；\r\n事务" +
            "报告时应该对资产进行快照；\r\n扩展属性服务;\r\nPaoApplication作为资产树的根，增加ObjectIDFactory用于通过资产ID查找对象；事务报告" +
            "时应该对资产进行快照；")]
        public string N_扩展属性 {
            get {
                return ((string)(this["N_扩展属性"]));
            }
            set {
                this["N_扩展属性"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("服务机制; 后台数据库; 服务和数据库的交互; 通用数据服务; IIS中服务的承载")]
        public string N_服务 {
            get {
                return ((string)(this["N_服务"]));
            }
            set {
                this["N_服务"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("事物机制; 事务服务; 分布式事务;")]
        public string N_事务 {
            get {
                return ((string)(this["N_事务"]));
            }
            set {
                this["N_事务"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("可监控资产与资产注册的关系; 如何监控; 服务状态的定义; 服务状态的监控; 第三方服务状态的监控; WCF工厂的状态;")]
        public string N_资产状态 {
            get {
                return ((string)(this["N_资产状态"]));
            }
            set {
                this["N_资产状态"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("事务保存在数据库，树形结构；日志保存在日志记录中，流水结构；")]
        public string N_事务和日志分开 {
            get {
                return ((string)(this["N_事务和日志分开"]));
            }
            set {
                this["N_事务和日志分开"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("增加日志上传服务; 客户端定期上传日志;")]
        public string N_日志上传 {
            get {
                return ((string)(this["N_日志上传"]));
            }
            set {
                this["N_日志上传"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("增加一个机制用于反向访问服务")]
        public string N_反向访问 {
            get {
                return ((string)(this["N_反向访问"]));
            }
            set {
                this["N_反向访问"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("服务接口参数 vs 数据表字段 vs 内存对象")]
        public string N_ORM {
            get {
                return ((string)(this["N_ORM"]));
            }
            set {
                this["N_ORM"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("每个客户端有一个固定的客户端ID")]
        public string N_ClientID {
            get {
                return ((string)(this["N_ClientID"]));
            }
            set {
                this["N_ClientID"] = value;
            }
        }
    }
}
